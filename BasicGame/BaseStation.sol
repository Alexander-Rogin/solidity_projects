
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'GameObject.sol';
import 'MilitaryUnitIface.sol';

// This is class that describes you smart contract.
contract BaseStation is GameObject {
    address[] public unitAddresses;
    uint constant private HEALTH = 20;

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        setHealth(HEALTH);
    }

    function addUnit(address unitAddress) public checkOwnerAndAccept {
        unitAddresses.push(unitAddress);
    }

    function getAttack(uint attackStrength) public override checkOwnerAndAccept {
        super.getAttack(attackStrength);

        if (isDead()) {
            handleDeath(msg.sender);
        }
    }

    function handleDeath(address attacker) internal override {
        for (uint i = 0; i < unitAddresses.length; i++) {
            MilitaryUnitIface unit = MilitaryUnitIface(unitAddresses[i]);
            unit.killFromBase(msg.sender);
        }
        delete unitAddresses;
        super.handleDeath(attacker);
    }

    function removeUnit(address unitAddress) public checkOwnerAndAccept {
        if (isDead()) {
            return;
        }
        for (uint i = 0; i < unitAddresses.length; i++){
            if (unitAddresses[i] == unitAddress) {
                unitAddresses[i] = unitAddresses[unitAddresses.length - 1];
                delete unitAddresses[unitAddresses.length - 1];
                return;
            }
        }
    }
}
