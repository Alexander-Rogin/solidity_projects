
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'GameObjectInterface.sol';

contract GameObject is GameObjectInterface {
    uint private health_;

    // Modifier that allows function to accept external call only if it was signed
    // with contract owner's public key.
    modifier checkOwnerAndAccept {
        // Check that inbound message was signed with owner's public key.
        // Runtime function that obtains sender's public key.
        require(msg.pubkey() == tvm.pubkey(), 100);

		// Runtime function that allows contract to process inbound messages spending
		// its own resources (it's necessary if contract should process all inbound messages,
		// not only those that carry value with them).
		tvm.accept();
		_;
	}

    function getHealth() public checkOwnerAndAccept returns(uint) {
        return health_;
    }

    function setHealth(uint health) internal {
        tvm.accept();

        health_ = health;
    }

    function getAttack(uint attackStrength) virtual public override {
        tvm.accept();

        if (attackStrength > health_) {
            health_ = 0;
        } else {
            health_ -= attackStrength;
        }
    }

    function isDead() internal returns(bool) {
        tvm.accept();
        if (health_ == 0) {
            return true;
        }
        return false;
    }

    function handleDeath(address attacker) virtual internal {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();

        // Send everything and destroy
        bool bounce = true;
        uint16 flag = 128 + 32;
        attacker.transfer(0, bounce, flag);
    }
}
